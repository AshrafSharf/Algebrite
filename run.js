// Generated by CoffeeScript 1.10.0
var check_esc_flag, check_stack, echo_input, run, stop, top_level_eval;

stop = function(s) {
  printstr("Stop: ");
  printstr(s);
  printstr("\n");
  return longjmp(stop_return, 1);
};

run = function(s) {
  var i, n, p1, p2, results;
  i = 0;
  n = 0;
  if (s === "selftest") {
    selftest();
    return;
  }
  init();
  results = [];
  while (1.) {
    n = scan(s);
    p1 = pop();
    check_stack();
    if (n === 0) {
      break;
    }
    s += n;
    push(p1);
    top_level_eval();
    p2 = pop();
    check_stack();
    if (p2 === symbol(NIL)) {
      continue;
    }
    if (isstr(p2)) {
      printstr(p2.str);
      printstr("\n");
      continue;
    }
    results.push(printline(p2));
  }
  return results;
};

check_stack = function() {
  if (tos !== 0) {
    stop("stack error");
  }
  if (frame !== stack + TOS) {
    return stop("frame error");
  }
};

echo_input = function(s) {
  printstr(s);
  return printstr("\n");
};

top_level_eval = function() {
  var doNothing, expanding, p1, p2, trigmode;
  save();
  trigmode = 0;
  p1 = symbol(AUTOEXPAND);
  if (iszero(get_binding(p1))) {
    expanding = 0;
  } else {
    expanding = 1;
  }
  p1 = pop();
  push(p1);
  eval();
  p2 = pop();
  if (p2 === symbol(NIL)) {
    push(p2);
    restore();
    return;
  }
  set_binding(symbol(LAST), p2);
  if (!iszero(get_binding(symbol(BAKE)))) {
    push(p2);
    bake();
    p2 = pop();
  }
  if ((p1 === symbol(SYMBOL_I) || p1 === symbol(SYMBOL_J)) && isimaginaryunit(p2)) {
    doNothing = 0;
  } else if (isimaginaryunit(get_binding(symbol(SYMBOL_J)))) {
    push(p2);
    push(imaginaryunit);
    push_symbol(SYMBOL_J);
    subst();
    p2 = pop();
  } else if (isimaginaryunit(get_binding(symbol(SYMBOL_I)))) {
    push(p2);
    push(imaginaryunit);
    push_symbol(SYMBOL_I);
    subst();
    p2 = pop();
  }
  if (issymbol(p1) && !iskeyword(p1) && p1 !== p2 && test_flag === 0) {
    push_symbol(SETQ);
    push(p1);
    push(p2);
    list(3);
    p2 = pop();
  }
  push(p2);
  return restore();
};

check_esc_flag = function() {
  if (esc_flag) {
    return stop("esc key");
  }
};

//# sourceMappingURL=run.js.map
